# Imports from the Google ADK and Google Generative AI library
from google.adk.agents import Agent, LlmAgent, SequentialAgent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types

GEMINI_MODEL = "gemini-1.5-flash-latest"

# --- 1. Define Sub-Agents for Each Technical Documentation Generation Stage ---

# Technical Documentation Creator Agent
# Takes the initial request and creates technical documentation
doc_creator_agent = LlmAgent(
    name="DocCreatorAgent",
    model=GEMINI_MODEL,
    instruction="""You are a Technical Documentation Writer.
Based *only* on the user's request, create comprehensive technical documentation that fulfills their requirements.
Structure your documentation with these sections:
- Title
- Overview
- Prerequisites (if applicable)
- System Requirements (if applicable)
- Installation/Setup (if applicable)
- Configuration (if applicable)
- Usage Instructions
- API Reference (if applicable)
- Troubleshooting (if applicable)
- FAQs (if applicable)
- References

Use clear, concise language appropriate for technical audiences.
Include all relevant code examples, configuration snippets, or command-line instructions as needed.
Format code blocks using triple backticks with language specification.
Output *only* the complete documentation, with no additional text before or after.
""",
    description="Creates initial technical documentation based on user's requirements.",
    output_key="generated_doc"  # Stores output in state['generated_doc']
)

# Documentation Reviewer Agent
# Takes the documentation generated by the previous agent and provides feedback
doc_reviewer_agent = LlmAgent(
    name="DocReviewerAgent",
    model=GEMINI_MODEL,
    instruction="""You are an expert Technical Documentation Reviewer. 
Your task is to provide constructive feedback on the provided documentation.

**Documentation to Review:**
{generated_doc}

**Review Criteria:**
1. **Technical Accuracy:** Is all technical information correct and up-to-date?
2. **Completeness:** Does the documentation cover all necessary aspects of the subject?
3. **Clarity:** Is the documentation clear, concise, and easy to understand?
4. **Structure:** Is the documentation well-organized with logical flow?
5. **Code Examples:** Are code examples correct, properly formatted, and helpful?
6. **Audience Appropriateness:** Is the content appropriate for the intended audience's technical level?
7. **Consistency:** Is terminology and formatting used consistently throughout?
8. **Actionability:** Can users successfully complete tasks by following the documentation?

**Output:**
Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.
If the documentation is excellent and requires no changes, simply state: "No major issues found."
Output *only* the review comments or the "No major issues" statement.
""",
    description="Reviews technical documentation and provides feedback.",
    output_key="review_comments",  # Stores output in state['review_comments']
)

# Documentation Refiner Agent
# Takes the original documentation and the review comments and refines the documentation
doc_refiner_agent = LlmAgent(
    name="DocRefinerAgent",
    model=GEMINI_MODEL,
    instruction="""You are a Technical Documentation Refinement Expert.
Your goal is to improve the given technical documentation based on the provided review comments.

**Original Documentation:**
{generated_doc}

**Review Comments:**
{review_comments}

**Task:**
Carefully apply the suggestions from the review comments to refine the original documentation.
If the review comments state "No major issues found," return the original documentation unchanged.
Ensure the final documentation is complete, accurate, clear, and well-structured with all relevant sections.
Maintain consistent formatting and appropriate technical language throughout.

**Output:**
Output *only* the final, refined documentation with all necessary sections.
Do not add any other text before or after the documentation.
""",
    description="Refines technical documentation based on review comments.",
    output_key="refined_doc",  # Stores output in state['refined_doc']
)

# --- 2. Create the SequentialAgent ---
# This agent orchestrates the pipeline by running the sub_agents in order
doc_pipeline_agent = SequentialAgent(
    name="DocPipelineAgent",
    sub_agents=[doc_creator_agent, doc_reviewer_agent, doc_refiner_agent],
    description="Executes a sequence of technical documentation creation, reviewing, and refining.",
    # The agents will run in the order provided: Creator -> Reviewer -> Refiner
)

# For ADK tools compatibility, the root agent must be named `root_agent`
root_agent = doc_pipeline_agent

# --- 3. Runner Setup (For Testing) ---
# This section allows you to run the agent pipeline locally

def test_doc_generator():
    # Create a runner with the documentation pipeline agent
    runner = Runner(
        agent=root_agent,
        session_service=InMemorySessionService()
    )
    
    # Example user query
    user_query = "Create documentation for a REST API that manages a simple todo list application"
    
    # Run the agent with the user query
    final_state = runner.run(user_query=user_query)
    
    # Print the final refined documentation
    print("\n=== FINAL DOCUMENTATION ===\n")
    print(final_state["refined_doc"])
    
    # Optionally print intermediate outputs for debugging
    print("\n=== REVIEW COMMENTS ===\n")
    print(final_state["review_comments"])

# Uncomment to run the test
# if __name__ == "__main__":
#     test_doc_generator()