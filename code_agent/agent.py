# Imports from the Google ADK and Google Generative AI library
from google.adk.agents import Agent, LlmAgent, SequentialAgent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.genai import types

GEMINI_MODEL = "gemini-1.5-flash-latest"

# --- 1. Define Sub-Agents for Each Recipe Generation Stage ---

# Recipe Creator Agent
# Takes the initial request and creates a recipe
recipe_creator_agent = LlmAgent(
    name="RecipeCreatorAgent",
    model=GEMINI_MODEL,
    instruction="""You are a Recipe Generator.
Based *only* on the user's request, create a complete recipe that fulfills their requirements.
Structure your recipe with these sections:
- Title
- Description
- Ingredients (with measurements)
- Instructions (step by step)
- Cooking time
- Servings
- Tips (optional)

Output *only* the complete recipe, with no additional text before or after.
""",
    description="Creates initial recipe based on user's requirements.",
    output_key="generated_recipe"  # Stores output in state['generated_recipe']
)

# Recipe Reviewer Agent
# Takes the recipe generated by the previous agent and provides feedback
recipe_reviewer_agent = LlmAgent(
    name="RecipeReviewerAgent",
    model=GEMINI_MODEL,
    instruction="""You are an expert Recipe Reviewer. 
Your task is to provide constructive feedback on the provided recipe.

**Recipe to Review:**
{generated_recipe}

**Review Criteria:**
1. **Completeness:** Does the recipe include all necessary ingredients and clear instructions?
2. **Accuracy:** Are the measurements and cooking times reasonable and appropriate?
3. **Clarity:** Are the instructions clear, detailed, and easy to follow?
4. **Practicality:** Is the recipe practical for home cooks? Does it require special equipment or hard-to-find ingredients?
5. **Flavor Profile:** Does the recipe have a balanced flavor profile? Are there any concerning flavor combinations?
6. **Safety:** Are there any food safety concerns or issues?

**Output:**
Provide your feedback as a concise, bulleted list. Focus on the most important points for improvement.
If the recipe is excellent and requires no changes, simply state: "No major issues found."
Output *only* the review comments or the "No major issues" statement.
""",
    description="Reviews recipe and provides feedback.",
    output_key="review_comments",  # Stores output in state['review_comments']
)

# Recipe Refiner Agent
# Takes the original recipe and the review comments and refines the recipe
recipe_refiner_agent = LlmAgent(
    name="RecipeRefinerAgent",
    model=GEMINI_MODEL,
    instruction="""You are a Recipe Refinement Expert.
Your goal is to improve the given recipe based on the provided review comments.

**Original Recipe:**
{generated_recipe}

**Review Comments:**
{review_comments}

**Task:**
Carefully apply the suggestions from the review comments to refine the original recipe.
If the review comments state "No major issues found," return the original recipe unchanged.
Ensure the final recipe is complete, practical, and well-structured with clear sections.

**Output:**
Output *only* the final, refined recipe with all sections (Title, Description, Ingredients, Instructions, etc.).
Do not add any other text before or after the recipe.
""",
    description="Refines recipe based on review comments.",
    output_key="refined_recipe",  # Stores output in state['refined_recipe']
)

# --- 2. Create the SequentialAgent ---
# This agent orchestrates the pipeline by running the sub_agents in order
recipe_pipeline_agent = SequentialAgent(
    name="RecipePipelineAgent",
    sub_agents=[recipe_creator_agent, recipe_reviewer_agent, recipe_refiner_agent],
    description="Executes a sequence of recipe creation, reviewing, and refining.",
    # The agents will run in the order provided: Creator -> Reviewer -> Refiner
)

# For ADK tools compatibility, the root agent must be named `root_agent`
root_agent = recipe_pipeline_agent

# --- 3. Runner Setup (For Testing) ---
# This section allows you to run the agent pipeline locally

def test_recipe_generator():
    # Create a runner with the recipe pipeline agent
    runner = Runner(
        agent=root_agent,
        session_service=InMemorySessionService()
    )
    
    # Example user query
    user_query = "Create a vegetarian pasta recipe with mushrooms and spinach"
    
    # Run the agent with the user query
    final_state = runner.run(user_query=user_query)
    
    # Print the final refined recipe
    print("\n=== FINAL RECIPE ===\n")
    print(final_state["refined_recipe"])
    
    # Optionally print intermediate outputs for debugging
    print("\n=== REVIEW COMMENTS ===\n")
    print(final_state["review_comments"])

# Uncomment to run the test
# if __name__ == "__main__":
#     test_recipe_generator()